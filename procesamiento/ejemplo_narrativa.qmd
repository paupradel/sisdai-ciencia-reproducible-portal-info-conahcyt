---
title: "Desglose de presupuesto"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
fig-width: 5
fig-height: 5
---

## Introducción

Este archivo contiene el ejemplo y explicación de cómo se genera el archivo json para alimentar el componente de dona en el Sisdai dentro de una narrativa que explica cómo se ejerce el presupuesto del Conahcyt por año. Adicionalmente, contiene una réplica de la narrativa utilizando gráficas estáticas.

Para poder generar el archivo formato `json` que requiere el componente, es necesario haber descargado los datos de la Cuenta Pública desde el [portal de transparencia presupuestaria](https://www.transparenciapresupuestaria.gob.mx/Datos-Abiertos), para lo cual es necesario correr el código `01_descarga_datos.R`

## Generación de archivo json

```{r carga_bibliotecas}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(readr, dplyr, jsonlite, scales, tidyr, glue, purrr, ggplot2, stringr)

```

```{r lectura_datos, message=FALSE}
datos_cp <- read_csv("../datos/datos-procesados/datos_ramo38.csv")
```

```{r auxiliares}
## se generan variables auxiliares para la agrupacion de los programas presupuestarios y elementos de la visualizacion

colores <- c(
  "total" = "#FFFFFF",
  "becas" = "#131347",
  "snii" = "#5979A1",
  "fomento" = "#CDF0CE",
  "pronaces" = "#CDF0CE",
  "admin" = "#AB57FF",
  "cp" = "#18B584",
  "resto" = "#FFFFFF"
)

representan <- c(
  "Total" = "Total",
  "Becas" = "Becas",
  "SNII"= "Sistema Nacional de Investigadoras e Investigadores",
  "Promoción y fomento" = "Promoción y Fomento",
  "Pronaces" = "Programas Nacionales Estratégicos",
  "Admin" = "Administrativo",
  "CP" = "Centros Públicos",
  "Resto" = "Resto"
)

guia <- tibble(
  id = names(colores), 
  nombre = names(representan),
  descripcion = representan,
  color = colores,
  orden = 0:7
)

```

**Agrupacion de datos**: la primera agrupación indica el total del monto ejercido cada año dentro de los cinco grupos que se manejan, asi como el porcentaje de lo que eso representa dentro de ese anio

```{r procesamiento_datos_general}

anuales <-
  datos_cp |> 
  mutate(
    monto_final = case_when(
      # variable para unificar el monto ejercido
      monto_ejercido > 0 ~ monto_ejercido,
      monto_devengado > 0 ~ monto_devengado,
      T ~ monto_ejercicio
    ),
    id = case_when(
      desc_ur != "Consejo Nacional de Ciencia y Tecnología"  ~ "cp",
      mod_pp %in% c("F-001", "F-002", "U-003", "S-192", "S-225",
                    "S-236", "S-278", "U-004") ~ "fomento",
      mod_pp == "F-003" ~ "pronaces",
      mod_pp %in% c("S-190", "U-002") ~ "becas",
      mod_pp == "S-191" ~ "snii",
      TRUE ~ "admin"
    ),
  ) |> 
  group_by(ciclo, id) |> 
  summarise(
    monto_ejercido = sum(monto_final, na.rm = T),
  ) |> 
  mutate(
    porcentaje = monto_ejercido / sum(monto_ejercido)
  ) |> 
  ungroup() |> 
  filter(monto_ejercido > 0)

total <- 
  anuales |> 
  group_by(ciclo) |> 
  summarise(monto_ejercido = sum(monto_ejercido)) |> 
  mutate(
    id = "total", 
    porcentaje = 1,
    cs = 0) |> 
  left_join(guia)
```

**transformaciones para json**: de forma general, esto se hace por medio de generar una lista anidada donde el primer nivel es el año y posteriormente vienen elementos que representan la informacion que se necesita para cada grafico de dona, acompaniado de su texto descriptivo

```{r procesamiento_datos_especifico}
# Totales por anio
total <- 
  anuales |> 
  group_by(ciclo) |> 
  summarise(monto_ejercido = sum(monto_ejercido)) |> 
  mutate(
    id = "total", 
    porcentaje = 1,
    cs = 0) |> 
  left_join(guia)

tmp <-
  anuales |>
  left_join(guia) |> 
  arrange(ciclo, orden) |> 
  group_by(ciclo) |> 
  mutate(
    cs = cumsum(monto_ejercido),
  ) |> 
  bind_rows(total) |> 
  arrange(ciclo, orden) |> 
  mutate(
    resto = max(monto_ejercido) - cs
  ) |> 
  ungroup() 

rst <-   
  tmp |> 
  select(ciclo, monto_ejercido = resto) |> 
  mutate(orden = max(guia$orden)) |> 
  left_join(guia) |> 
  mutate(
    orden = tmp$orden  
    )

tmp2 <- 
  tmp |> 
  # filter(orden != 0) |> 
  filter(orden != max(guia$orden)) |> 
  arrange(ciclo, orden) |> 
  select(-c(cs, resto)) 

lista_final <- list()
lista_datos <- list()

for(a in unique(tmp2$ciclo)){
  t <- tmp2 |> filter(ciclo == a) 
  r <- rst |> filter(ciclo == a) 
  
  n <- 1
  
  for(i in r$orden) {
    
    dat <- 
      bind_rows(
        t |> 
          filter(orden <= i),
        r |> 
          filter(orden == i) |> 
          mutate(orden = max(guia$orden))
      ) |> 
      arrange(orden) |> 
      filter(orden != 0)
    
    
    if (i == max(guia$orden)) {
      b1 <- dat
    } else if (i == 0) {
      b1 <- dat
      b1$orden[b1$id == "resto"] <- 0
    } else {
      b1 <- dat |> filter(orden != max(guia$orden))
    }
    
    b <- 
      b1 |> 
      filter(orden == max(orden)) |> 
      mutate(
        bullet = case_when(
          # 0 el total
          i == 0 ~ glue('En {ciclo}, el Gobierno de México ejerció {number(monto_ejercido, 
                       scale = .000001, big.mark = ",")} millones de pesos (MDP) a través del ramo 38 denominado "Consejo Nacional de Ciencia y Tecnología"'),
          
          # 1 es becas
          i == 1 ~ glue("de esta cifra, el Consejo Nacional destinó el {percent(porcentaje, accuracy = .1)} ({number(monto_ejercido,  
                       scale = .000001, big.mark = ',')} MDP)  a {(descripcion)}"),
          # 2 es snii
          i == 2 ~ glue("el {percent(porcentaje, accuracy = .1)} ({number(monto_ejercido, 
                       scale = .000001, big.mark = ',')} MDP) al {(descripcion)} ({nombre})"),
          
          # 3 es promocion y fomento 
          i == 3 ~ glue("un {percent(porcentaje, accuracy = .1)} ({number(monto_ejercido, 
                       scale = .000001, big.mark = ',')} MDP) a {(descripcion)}"),
          # 4 pronaces
          i == 4 ~ glue("un {percent(porcentaje, accuracy = .1)} ({number(monto_ejercido, 
                       scale = .000001, big.mark = ',')} MDP) a los {(descripcion)} ({nombre})"),
          
          # El resto (5) administrativo
          i == 5 ~ glue("y otro {percent(porcentaje, accuracy = .1)} ({number(monto_ejercido, 
                       scale = .000001, big.mark = ',')} MDP) a temas de corte Administrativo."),
          # 6 es cp
          i == 6 ~ glue("Finalmente el {percent(porcentaje, accuracy = .1)} ({number(monto_ejercido, 
                       scale = .000001, big.mark = ',')} MDP) del ramo 38 fue ejercido desde los {(descripcion)} ({nombre}).")
          
        )
      ) |> pull(bullet) 
    
    lista_salida <- list(
      bullet = b, 
      datos = dat |> select(id, monto_ejercido),
      variables = dat |> select(id, color, nombre)
    )
    lista_datos[[n]] <- lista_salida 
    n <- n + 1
  }
  
  lista_final <- append(lista_final, list(lista_datos))
}

names(lista_final) <- as.character(unique(tmp2$ciclo))

```

## Réplica de la narrativa

Para replicar la narrativa del [portal](https://info.conahcyt.mx/)...

```{r ajuste_formato}
# lo primero es acomodar los datos
tabular_narrativa <- 
  bind_rows(lista_final, .id = "indice") |> 
  unnest(datos, names_sep = "_") |>
  unnest(variables, names_sep = "_") |> 
  mutate(ciclo = rep(names(lista_final), each = 21),
         ciclo = as.numeric(ciclo))
```

Para esto, se genera una función que grafica todas las donas con sus respectivos textos en orden.

```{r funcion_narrativa}

dona <- function(datos, anio) {
  # Funcion para visualizar narrativa. Las variables que necesita son:
  # datos: dataframe con todos los datos 
  # anio: el anio que se quiere visualizar en formato numerico
  
  df <- datos |> filter(ciclo == anio)
  
  for(i in unique(df$indice)) {
    tmp <- 
      df |> 
      filter(indice == i) |> 
      mutate(prc = datos_monto_ejercido / sum(datos_monto_ejercido),
             # prc_lab = percent(prc, accuracy = .1)
             prc_lab = ifelse(datos_id != "resto", percent(prc), "")
             )
             # prc = ifelse(i)) 
    tmp$ymax <- cumsum(tmp$prc)
    tmp$ymin = c(0, head(tmp$ymax, n=-1))
    
    p <- 
      ggplot(tmp, 
             aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=variables_color)) +
      geom_rect() +
      coord_polar(theta="y") +
      geom_text(x = 3.5, color = "white", fontface = "bold", 
                aes(y = (ymax + ymin)/2, 
                    label = prc_lab)) +
      xlim(c(1, 4)) +
      labs(title = str_wrap(unique(tmp$bullet), 50),
           legend = "") +
      scale_fill_identity() +
      theme_void() +
      theme(
        panel.background = element_rect(fill = "grey92", 
                                        colour = NA)
      )
    print(p)
  }
}
```

Para la visualización, es necesario darle dos elementos a la función. El primero son los datos y el segundo el año que se quiere visualizar. En este caso, los datos son la variable `tabular_narrativa` y el año ejemplo es el `2021`.

```{r visualizacion} 
dona(tabular_narrativa, 2021)
```
